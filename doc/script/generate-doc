#!/usr/bin/env tclsh

proc main {} {
    global srcdocs

    set srcfiles  {battle game gui help init main simulator syscalls tournament}
    set srcdocs {}

    foreach file $srcfiles {
        # Generate documentation for source code
        gen_src_doc ${file}.tcl ${file}_doc
        clean_file  ${file}_doc
    }
    # Generate documentation for top-level file
    gen_src_doc ../tclrobots.tcl tclrobots_doc
    clean_file  tclrobots_doc

    # Generate documentation index
    set prefix "<!DOCTYPE html PUBLIC '-//W3C//DTD HTML 4.01//EN'
'http://www.w3.org/TR/html4/strict.dtd'>
<html lang='en-US'><head>
<meta http-equiv='content-type' content='text/html; charset=UTF-8'>"

    set suffix "</body></html>"

    set f [open ./doc/index.html w]
    puts $f $prefix
    puts $f "<title>TclRobots source documentation</title></head><body>"
    
    puts $f "<h3>TclRobots source documentation</h3><ol>"
    foreach doc $srcdocs {
	puts $f "<li>$doc</li>"
    }
    puts $f "</ol>"
    puts $f $suffix
    close $f

    # Generate README by stripping the HTML from help_doc.html
    gen_readme

    # Generate HTML file for sample robot page on website
    gen_samples
}

proc gen_src_doc {srcfile docfile} {
    global srcdocs

    # Generate html
    exec robodoc --src src/$srcfile --doc ./doc/$docfile --singlefile \
        --html --sections --toc --rc ./doc/script/robodoc.rc --nosort \
        --headless --footless --nopre

    # Remove extra css file
    file delete ./doc/$docfile.css

    # Append file name for documentation overview page
    lappend srcdocs "<a href='${docfile}.html'>$docfile</a>\n"
}

proc clean_file {docfile} {
    # Clean up file
    set f [open ./doc/${docfile}.html]
    set parsing_logo    1
    set parsing_toc     0
    set parsing_content 0
    set parsing_footer  0
    set out {}

    foreach line [split [read $f] \n] {
        if {$parsing_logo} {
            if {[regexp {TABLE OF CONTENTS} $line]} {
                # Start read table of contents. We don't want to remove
                # these links, as will be done with the content.
                set parsing_logo 0
                set parsing_toc  1
            } else {
                # Remove logo
                continue
            }
        }
        if {$parsing_toc} {
            if {[regexp {<a name="robo0"></a>} $line]} {
                # Table of contents done
                set parsing_toc     0
                set parsing_content 1
            }
        }
        if {$parsing_content} {
            if {[regexp {<p>. <a href=.*>Top</a>.*} $line]} {
                #Remove navigation
                continue
            }
            # Remove <strong> and </strong>
            set line [regsub -all {</*strong>} $line {}]

            # Remove links
            set line [regsub -all {<a href=\"[^\"]+\">([^<]+)</a>} $line {\1}]

            if {[regexp {<div id=\"footer\">} $line]} {
                set parsing_footer 1
            }
        }
        if {$parsing_footer} {
            # Remove footer
            continue
        }
        append out $line \n
    }
    close $f

    set f [open ./doc/${docfile}.html w]
    puts $f $out
    close $f
}

proc gen_readme {} {
    set src  [open ./doc/readme_doc.html]
    set dest [open ./README w]
    set text [read $src]

    # Strip all HTML tags
    puts $dest [regsub -all -- {<[^>]*>} $text {}]

    close $src
    close $dest
}

proc gen_samples {} {
    set f [open ./doc/sample-robots.html w]

    puts $f "For the robot API commands available see the <a href='http://tclrobots.org/documentation/#anchor6'>documentation</a>.

The sample robots are:
"

    foreach robot {charger clockwise corner traveler} {
	puts $f "<h1>$robot</h1>"
	set rfile [open ./samples/${robot}.tr]
	puts $f "<pre>"
	puts $f [read $rfile]
	puts $f "</pre>"
	close $rfile
    }
    close $f
}

# All procedures are sourced; run main
main
