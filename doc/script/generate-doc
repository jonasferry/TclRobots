#!/usr/bin/env tclsh

proc main {} {
    set srcfiles  {tclrobots syscalls gui simulator}
    set ::srcdocs {}

    foreach file $srcfiles {
        # Generate documentation for source code
        gen_src_doc ${file}.tcl ${file}_doc
        clean_file  ${file}_doc
    }

    # Generate documentation for robot API
    gen_api_doc syscalls.tcl api_doc
    clean_file  api_doc

    # Generate README by stripping the HTML from help_doc.html
    gen_readme
}

proc gen_src_doc {srcfile docfile} {
    global srcdocs

    # Generate html
    exec robodoc --src $srcfile --doc ./doc/$docfile --singlefile \
        --html --sections --toc --rc ./doc/script/robodoc.rc --nosort \
        --headless --footless --nopre

    # Remove extra css file
    file delete ./doc/$docfile.css

    # Append file name for documentation overview page
    append srcdocs "<a href='${docfile}.html'>$docfile</a>\n"
}

proc gen_api_doc {srcfile docfile} {
    # Generate html
    exec robodoc --src $srcfile --doc ./doc/$docfile --singlefile \
        --html --sections --toc --rc ./doc/script/robodoc.rc --nosort \
        --headless --footless \
        --internalonly

    # Remove extra css file
    file delete ./doc/$docfile.css
}

proc clean_file {docfile} {
    # Clean up file
    set f [open ./doc/${docfile}.html]
    set parsing_logo    1
    set parsing_toc     0
    set parsing_content 0
    set parsing_footer  0
    set out {}

    foreach line [split [read $f] \n] {
        if {$parsing_logo} {
            if {[regexp {TABLE OF CONTENTS} $line]} {
                # Start read table of contents. We don't want to remove
                # these links, as will be done with the content.
                set parsing_logo 0
                set parsing_toc  1
            } else {
                # Remove logo
                continue
            }
        }
        if {$parsing_toc} {
            if {[regexp {<a name="robo0"></a>} $line]} {
                # Table of contents done
                set parsing_toc     0
                set parsing_content 1
            }
        }
        if {$parsing_content} {
            if {[regexp {<p>. <a href=.*>Top</a>.*} $line]} {
                #Remove navigation
                continue
            }
            # Remove <strong> and </strong>
            set line [regsub -all {</*strong>} $line {}]

            # Remove links
            set line [regsub -all {<a href=\"[^\"]+\">([^<]+)</a>} $line {\1}]

            if {[regexp {<div id=\"footer\">} $line]} {
                set parsing_footer 1
            }
        }
        if {$parsing_footer} {
            # Remove footer
            continue
        }
        append out $line \n
    }
    close $f

    set f [open ./doc/${docfile}.html w]
    puts $f $out
    close $f
}

proc gen_readme {} {
    set   src  [open ./doc/help_doc.html]
    set   dest [open ./README w]

    set   text [read $src]
    # Remove comments so text can be viewed in ASCII README, but hidden
    # in HTML README
    set   text [regsub -all -- {<!--} $text {}]
    set   text [regsub -all -- {-->}  $text {}]

    # Strip all HTML tags
    puts  $dest [regsub -all -- {<[^>]*>} $text {}]

    close $src
    close $dest
}

# All procedures are sourced; run main
main