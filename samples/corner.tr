# TclRobots - sample robot control program
# Jonas Ferry 2010, Tom Poindexter 1996
#
#  -move to a random corner
#  -scan in medim resolution until something is found
#  -fire while in range
#  -move if nothing in range or hit

# define set of corner, and starting scan directions from those corners
#set corners {{10 10} {990 10} {10 990} {990 990}}
set corners {{20 20} {980 20} {20 980} {980 980}}
set cor_dir   {0       90       270      180}

set dam [health]

proc I_was_scanned {who} {
    dputs $who scanned me
}
alert I_was_scanned

# goto near an x,y location
proc goto {x y} {
    dputs goto $x $y
    # calculate heading to new location
    set rad2deg 57.2958
    set hdg [expr int($rad2deg * atan2(($y - [loc_y]),($x - [loc_x])))]
    if {$hdg < 0} {
        incr hdg 360
    }
    drive $hdg 100

    # keep moving until close to desired location
    while {abs($x - [loc_x]) > 40 || abs($y - [loc_y]) > 40} {
        set hdg [expr int($rad2deg * atan2(($y - [loc_y]),($x - [loc_x])))]
        if {$hdg < 0} {
            incr hdg 360
        }
        dputs heading $hdg
        # if speed drops below 100 due to heat, try to get speed back up
        if {[speed] <= 35} {
            drive $hdg 100
        }
    }
    dputs At location
    drive $hdg 0
}
# start of main code

# goto nearest corner
set x [loc_x]
set y [loc_y]

if {$x < 500} {
    set x 10
    set s1 0
} else {
    set x 990
    set s1 1
}
if {$y < 500} {
    set y 10
    set s2 0
} else {
    set y 990
    set s2 1
}
if {$s1 && $s2} {
    set start 180
    set new_corner 3
}
if {$s1 && !$s2} {
    set start 90
    set new_corner 1
}
if {!$s1 && $s2} {
    set start 270
    set new_corner 2
}
if {!$s1 && !$s2} {
    set start 0
    set new_corner 0
}
set resincr 5
goto $x $y

while {1} {
    set num_scans 5
    set dir $start

    while {($num_scans > 0) && (($dam - 10) < [health])} {
        set rng [scanner $dir $resincr]

        if {($rng > 0) && ($rng <= 700)} {
            set resincr 1
            cannon $dir $rng
            incr dir -8
        }
        incr dir $resincr
        if {$dir >= $start + 90} {
            incr num_scans -1
            set dir $start
            set resincr 5
        }
    }
    set test_corner [rand 4]

    while {$new_corner == $test_corner} {
        set test_corner [rand 4]
    }
    set new_corner $test_corner
    eval goto [lindex $corners $new_corner]
    set start [lindex $cor_dir $new_corner]
    set dam [health]
}
