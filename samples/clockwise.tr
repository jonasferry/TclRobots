#
# TclRobots - sample robot control program
# Tom Poindexter
#
# clockwise.tr
#  -move to a random center location
#  -scan in wide resolution until something is found
#  -use narrow to pinpoint target & fire, countinuing while found
#  -check damage periodically, move to new location if hit

set dir [rand 360]
set dam [health]
set nothing 0
set closest 0

# goto near an x,y location
proc goto {x y} {

    # calculate heading to new location
    set rad2deg 57.2958
    set delta_y [expr $y-[loc_y]]
    set delta_x [expr $x-[loc_x]]
    set hdg [expr int($rad2deg * atan2($delta_y,$delta_x))]
    if {$hdg < 0} {incr hdg 360}

    dputs hdg: $hdg to $x $y
    drive $hdg 100
    # NOT SUPPORTED in coroutine based TclRobots
    after 1000
    # keep moving until close to desired location
    while { abs($x-[loc_x]) > 20 || abs($y-[loc_y]) > 20} {
        # if ran into wall, break
        if {[speed] == 0} {break}
        # if speed drops below 100 due to heat, try to get speed back up
        if {[speed] <= 35} {drive $hdg 100}
    }
    drive $hdg 0
}

# start of main code
# start somewhere near the center
goto [expr [rand 400]+300] [expr [rand 400]+300]

while {1} {

    # look for an opponet
    set rng [scanner $dir 10]

    # if found and inrange
    if {$rng > 0 && $rng < 700} {

        # begin narrow scan
        set start [expr ($dir+20)%360]
        for {set limit 1} {$limit <= 40} {incr limit} {
            set dir [expr ($start-($limit)+360)%360]
            set rng [scanner $dir 1]
            if {$rng > 0 && $rng < 700} {
                # fire a shell, and backup scan so not to miss a moving target
                set nothing 0
                cannon $dir $rng
                incr limit -4
            }
            if {$dam-10 > [health]} { break }
        }
    } else {
        incr nothing
        if {$rng > 700} {set closest $dir}
    }

    # check for nothing found in reasonable time
    if {$nothing >= 30} {
        set nothing 0
        set dam [health]
        drive $closest 100
        # NOT SUPPORTED in coroutine based TclRobots
        after 10000 drive 0 0
    }

    # check for damage, move when incurred 10% damage
    if {$dam-10 >= [health]} {
        goto [expr [rand 400]+300] [expr [rand 400]+300]
        set dam [health]
    }

    set dir [expr ($dir-20+360)%360]
}
